name: EPA Data Pipeline CI/CD

on:
  pull_request:
    branches: 
      - main
      - test

env:
  AWS_REGION: us-east-1  # Change this to your AWS region
  ECR_REPOSITORY: epa-data-processor
  ECS_SERVICE: epa-service
  ECS_CLUSTER: epa-cluster
  ECS_TASK_DEFINITION: .aws\epa-task-revision1.json
  SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
  SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
  SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
  CONTAINER_NAME: epa-test
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'PROD' || 'TEST' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}

        run: |
          echo "Building for environment: ${ENVIRONMENT}"
          docker build \
            --build-arg SNOWFLAKE_USER=${SNOWFLAKE_USER} \
            --build-arg SNOWFLAKE_PASSWORD=${SNOWFLAKE_PASSWORD} \
            --build-arg SNOWFLAKE_ACCOUNT=${SNOWFLAKE_ACCOUNT} \
            --build-arg ENVIRONMENT=${ENVIRONMENT} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Also tag as latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest-${ENVIRONMENT}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest-${ENVIRONMENT}
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
